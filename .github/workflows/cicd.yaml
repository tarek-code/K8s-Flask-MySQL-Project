name: Run Pytest and Lint

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python "3.10"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r k8s/base/flaskapp/tests/requirements-tests.txt

      - name: Lint with flake8 and reviewdog
        uses: reviewdog/action-flake8@v3
        with:
          args: "k8s/base/flaskapp/app.py"
          reporter: github-pr-review
          fail_on_error: false
          level: warning
      
      - name: Lint SQL with sqlfluff
        run: |
          sqlfluff lint --dialect mysql k8s/base/database/init.sql || true

      - name: Run pytest
        run: |
          export PYTHONPATH=$(pwd)
          pytest k8s/base/flaskapp/tests/test_app.py

      - name: Run tests and generate coverage report
        run: |
          export PYTHONPATH=$(pwd)
          coverage run -m pytest k8s/base/flaskapp/tests/test_app.py
          coverage report --fail-under=80
         


      - name: Log in to Docker Hub
        if: contains(github.event.head_commit.message, '[build-image]')
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest tag for FlaskApp
        if: contains(github.event.head_commit.message, '[build-image]')
        id: flaskapp_tag
        run: |
          latest_tag=$(curl -s https://hub.docker.com/v2/repositories/tarekadel/k8s-flask-mysql-flaskapp/tags?page_size=1 | jq -r '.results[0].name')
          echo "Latest tag: $latest_tag"
          if [[ "$latest_tag" =~ ^v[0-9]+$ ]]; then
            num=${latest_tag#v}
            new_tag="v$((num+1))"
          else
            new_tag="v1"
          fi
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Get latest tag for MySQL (Private Repo)
        if: contains(github.event.head_commit.message, '[build-image]')
        id: mysql_tag
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          # Login and get JWT token
          token=$(curl -s -H "Content-Type: application/json" \
          -X POST \
          -d "{\"username\": \"${DOCKER_USERNAME}\", \"password\": \"${DOCKER_PASSWORD}\"}" \
          https://hub.docker.com/v2/users/login/ | jq -r .token)
          if [ -z "$token" ] || [ "$token" = "null" ]; then
            echo "❌ Failed to get JWT token for Docker Hub"
          exit 1
          fi

          # Get latest version tag (only tags starting with v and number)
          latest_tag=$(curl -s -H "Authorization: JWT $token" \
          "https://hub.docker.com/v2/repositories/tarekadel/k8s-flask-mysql-database/tags?page_size=100" \
          | jq -r '.results[].name' \
          | grep -E '^v[0-9]+$' \
          | sort -V \
          | tail -n 1)
          echo "Latest tag from DB repo: $latest_tag"
          if [[ "$latest_tag" =~ ^v[0-9]+$ ]]; then
            num=${latest_tag#v}
            new_tag="v$((num+1))"
          else
            new_tag="v1"
          fi

          echo "✅ New DB tag will be: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT


      - name: Build & Push FlaskApp
        if: contains(github.event.head_commit.message, '[build-image]')
        run: |
          docker build -t tarekadel/k8s-flask-mysql-flaskapp:${{ steps.flaskapp_tag.outputs.new_tag }} k8s/base/flaskapp
          docker push tarekadel/k8s-flask-mysql-flaskapp:${{ steps.flaskapp_tag.outputs.new_tag }}

      - name: Build & Push MySQL
        if: contains(github.event.head_commit.message, '[build-image]')
        run: |
          docker build -t tarekadel/k8s-flask-mysql-database:${{ steps.mysql_tag.outputs.new_tag }} k8s/base/database
          docker push tarekadel/k8s-flask-mysql-database:${{ steps.mysql_tag.outputs.new_tag }}

