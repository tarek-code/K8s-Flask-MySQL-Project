name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test_and_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r k8s/base/flaskapp/requirements-tests.txt

      - name: Run tests with coverage
        run: |
          pytest --cov=k8s/base/flaskapp --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

      - name: Run flake8 linting
        run: |
          pip install flake8
          flake8 k8s/base/flaskapp

  build_and_push:
    needs: test_and_lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Flask app image
        run: |
          docker build -t yourdockerhubusername/flaskapp:latest -f k8s/base/flaskapp/Dockerfile k8s/base/flaskapp
          docker push yourdockerhubusername/flaskapp:latest

      - name: Build and push MySQL image (optional)
        run: |
          docker build -t yourdockerhubusername/mysql-custom:latest -f k8s/base/database/Dockerfile k8s/base/database
          docker push yourdockerhubusername/mysql-custom:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -k k8s/overlays/production

